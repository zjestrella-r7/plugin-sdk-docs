Regenerating Plugins
********************

The following sections document things you need to know to regenerate the plugin. Regeneration occurs when you want to
update the plugin schema to support new actions, triggers, improved title and descriptions, etc. without manually
saving your work and updating the JSON schema.

Compatibility
-------------

Plugins developed after October 1, 2016 have the ability to be regenerated.

Regenerate Command
------------------

As decribed in the SDK Spec document, plugin skeletons are generated by running:

.. only:: python

  ``komand plugin generate python plugin.spec.yaml``.

.. only:: go

  ``komand plugin generate go plugin.spec.yaml``.

If you decide to modify your plugin's scheme, by editing ``plugin.spec.yaml``, you'll need to regenerate the plugin skeleton.

Process
^^^^^^^

The following process allows us to pick and choose the changes we would like to keep. This way we can obtain
the updated schema as well as select to keep our code.

1. Commit the current state of your plugin before regeneration. **Work will be lost if not committed**.
2. Update the ``plugin.spec.yaml`` file with the new schema
3. Run ``make regenerate``
4. Use ``git status`` and ``git diff`` to examine the differences
5. Use ``git checkout -- <file>``` to revert back to a files state before regeneration
6. Use ``git add -p`` to and y|n|s (yes, no, split) to stage changes you want to keep
7. Commit with results with ``git commit``

Video
^^^^^

We have a video documentation of this process which may be easier to grasp.

`Regenerating Plugins <https://www.youtube.com/watch?v=g-ll1dDQmBs&list=PLzmK1wbzR51maMlHMKjQoiuYFPbWWtMV0&index=6>`_

Example
-------

Here's an example of plugin regeneration by updating the schema (``plugin.spec.yaml``) to support:

* Adding a new action to lookup malware hashes
* Change plugin title
* Update plugin version

.. only:: go

  The following sets of examples refer to the Cymon plugin as an example, and as such will refer to Python specific file structures, however
  we'll make note of any differences for go plugins as they apply

.. code-block:: bash

  $ vim plugin.spec.yaml # Updated the schema
  $ make regenerate
  Generating new plugin skeleton
  ...
  Overlaying plugin skeleton to the current directory

The new skeleton changed everything.

* Test files are deleted but need to be saved. The new skeleton doens't have them (It starts fresh, removing everything not in it).
* Version and title name have been included in the new skeleton files
* The new action gets its own action file

Here's list of the modified files with ``git status``

.. code-block:: bash

  $ git status
  On branch cymon
  Your branch is up-to-date with 'origin/cymon'.
  Changes not staged for commit:
    (use "git add/rm <file>..." to update what will be committed)
    (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   cymon/Makefile
    modified:   cymon/bin/komand_cymon
    modified:   cymon/komand_cymon/actions/__init__.py
    modified:   cymon/komand_cymon/actions/address_blacklist.py
    modified:   cymon/komand_cymon/actions/address_lookup.py
    modified:   cymon/komand_cymon/actions/domain_blacklist.py
    modified:   cymon/komand_cymon/actions/domain_lookup.py
    modified:   cymon/komand_cymon/actions/url_lookup.py
    modified:   cymon/plugin.spec.yaml
    modified:   cymon/setup.py
    deleted:    cymon/tests/address_blacklist.json
    deleted:    cymon/tests/domain_blacklist.json
    deleted:    cymon/tests/found_address_lookup.json
    deleted:    cymon/tests/found_domain_lookup.json
    deleted:    cymon/tests/found_url_lookup.json
    deleted:    cymon/tests/not_found_address_lookup.json
    deleted:    cymon/tests/not_found_domain_lookup.json
    deleted:    cymon/tests/not_found_url_lookup.json

.. only:: go

  The go folder structure is similar, however you will notice these differences:
  * There is a cmd/plugin.go file in addition to the binary in bin/. You should never manually edit the files in bin/, as in go these are compiled binaries.
  * There are no __init__ or setup files.
  * actions / connections / triggers all live one directory up compared to a python plugin, due to differences in the language.

If you want, you can inspect the differences of each file with ``git --diff``.

You should see changes to the spec.yml file itself, changing the title and version of the plugin.

Additionally, you'll see those changes reflected in some of the plugin itself.

One thing you'll notice is the loss of all the custom code you authored. Currently there is no perfect solution
around preventing this, but there are some strategies to help recover it. We are currently looking at revising this process, so as much existing work as possible is left intact.

We'll start off by saving the test files that are marked as delete because we still want those.
These tests were create for the existing actions we had in this plugin. Since we added a new action and did not remove
any of the old ones in our schema change we still the old test files.

The follow command checkouts the previous versions of the JSON test payloads before regenerating marked them as deleted.

.. code-block:: bash

  git checkout -- tests/*

Next, let's save our existing work in the original action files since the new skeleton cleaned out the code in the `run` methods.

.. code-block:: bash

  git checkout -- komand_cymon/actions/address_blacklist.py

.. only:: go

  For go specific plugins, you can run ``git checkout -- path/to/actions/the_action_code.go`` to achieve the same effect

Next, we'll update our main program, keeping the version and title changes we want. We do this by entering `y` for each change we want to stage.
If there was a change we didn't want we would have entered `n` for no. If there's two changes close together where we want one and not the other we can
use `s` to split them into smaller pieces and then choose to commit the smaller piece.

.. only:: python

  .. code-block:: bash

    git add -p bin/komand_cymon

.. only:: go

  .. code-block:: bash

    git add -p cmd/plugin.go

The regenerate command will also add in the new actions / triggers you defined. These new files are listed in the ``Untracked files:`` section of ``git status``.

.. code-block:: bash

  Untracked files:
    (use "git add <file>..." to include in what will be committed)

    cymon/komand_cymon/actions/malware_lookup.py

  We can add it by its path `git add komand_cymon/actions/malware_lookup.py`.

We repeat this process until the plugin looks the way we want, then we commit it
e.g. ``git commit -m "Regenerating plugin to support new action and updated title and version'.``
